*******Algorithme and its element****************
ALGORITHM text_analyze
VAR
    c : CHAR := '';
    nb_char : INTEGER := 0;
    nb_word : INTEGER := 0;
    nb_vow : INTEGER := 0;
BEGIN
    WHILE (c <> '.') DO
        Read(c);
        nb_char := nb_char +1;
        IF (c = 'a' OR c='e' OR c='i' OR c='o' OR c='u' OR c='y') THEN
            nb_vow := nb_vow +1;
        END_IF

        IF (c=' ') THEN
            nb_word := nb_word +1;
        END_IF
        
    END_WHILE

    Write("The length of the sentence is ",nb_char-1);
    Write("The number of words in the sentence is ",nb_word);
    Write("he number of vowels in the sentence. is ",nb_vow);
END
********Linear-data-structure***************************
ALGORITHM distinctElement
VAR
    set1,set2 : ARRAY_OF INTEGER[20];
    i,j : INTEGER;
    sum : INTEGER :=  0;
    found : BOOLEAN;
BEGIN
    // reading elements in the two sets

    // Compare each element of set one with the second set 
    // and if element is not present then add that element to sum.

    FOR i FROM 0 TO set1.length-1 DO
        found := FALSE;
        FOR j FROM 0 TO set2.length-1 DO
            IF(set1[i] = set2[j]) THEN
                found := TRUE;
                BREAK;
            END
        END_FOR
        IF (NOT found) THEN
            sum := sum + set1[i];
        END_IF
    END_FOR

    //Then do the vice versa to add elements from the second set. 
    FOR i FROM 0 TO set2.length-1 DO
        found := FALSE;
        FOR j FROM 0 TO set1.length-1 DO
            IF(set2[i] = set1[j]) THEN
                found := TRUE;
                BREAK;
            END
        END_FOR
        IF (NOT found) THEN
            sum := sum + set2[i];
        END_IF
    END_FOR

    Write(sum);
END
******************scalar-product*****************
PROCEDURE dot_product(v1,v2 : ARRAY_OF INTEGER, VAR dot : INTEGER)
VAR
    i : INTEGER;
BEGIN
    dot :=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculat dot product");
        dot := NaN; // NaN : not definte number
    END_IF
    WHILE (i <v1.length ) DO
        dot := dot + v1[i]*v2[i];
    END_WHILE
END
// 2) 
ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [50];
    dot : INTEGER;
BEGIN
    // Read Size of elements of V1 
    n1 := read_size();
    // Read elements of V1
    read_array(n1,v1);
    // Read Size of elements of V2 
    n2 := read_size();
    // Read elements of V2
    read_array(n2,v2);
    dot_product(v1,v2,dot);
    IF (dot = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END

// 3)

FUNCTION dot_product(v1,v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i, dot : INTEGER;
BEGIN
    dot :=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculat dot product");
        RETURN NaN; // NaN : not definte number
    END_IF
    WHILE (i <v1.length ) DO
        dot := dot + v1[i]*v2[i];
    END_WHILE
    RETURN dot ;
END

ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [50];
    dot : INTEGER;
BEGIN
    // Read Size of elements of V1 
    n1 := read_size();
    // Read elements of V1
    read_array(n1,v1);
    // Read Size of elements of V2 
    n2 := read_size();
    // Read elements of V2
    read_array(n2,v2);
    dot := dot_product(v1,v2);
    IF (dot = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END
******************Selection Sort**************
PROCEDURE swap(VAR xp:INTEGER,VAR yp:INTEGER)
VAR
    tmp : INTEGER;
BEGIN
    tmp:=xp;
    xp:=yp;
    yp:=tmp
END

PROCEDURE selectionSort(VAR arr: ARRAY_OF INTEGER)
VAR
    i,j,min_idx,n: INTEGER;
BEGIN
    n:=arr.length
    
    FOR i FROM 0 TO n-1 STEP 1  DO
        min_idx:=i
        FOR j FROM i+1 TO n-1 STEP step  DO
            IF (arr[j]<arr[min_idx]) THEN 
                min_idx:=j
            END_IF
        END_FOR
        //swap the found minimum element with the first element
        swap(arr[min_idx],arr[i])
    END_FOR
END
**************insertion sort ***********
PROCEDURE insertion_sort(VAR arr : ARRAY_OF INTEGER)
VAR
    i,j,current : INTEGER;
BEGIN
    FOR i FROM 1 TO arr.length-1 DO
        current := arr [i];
        j := i-1;
        WHILE (j >= 0 AND arr[j] > current) DO
            arr[j+1] := arr[j];
            j := j-1;
        END_WHILE
        arr[j+1] = current;
    END_FOR
END
*****Palindrome*****
FUNCTION is_palindrome(s : STRING[50], start,end : INTEGER) : BOOLEAN
BEGIN
    IF (start >= end) THEN
        RETURN TRUE;
    ELSE_IF (s[start] = s[end]) THEN
        RETURN is_palindrome(s, start +1, end -1);
    ELSE
        RETURN FALSE
    END_IF
END

// initial call 
// is_palindrome(s,0,s.length-1)